/*
  Efetue o download do dataset existente no link:
  https://www.kaggle.com/datasets/olistbr/brazilian-ecommerce

  - Após criar as tabelas abaixo, importe o dataset, preenchendo assim a base de dados;
*/

--DROP TABLE CUSTOMERs_RM97898;
CREATE TABLE CUSTOMERs_RM97898 (
  CUSTOMER_id              VARCHAR(32),
  CUSTOMER_unique_id       VARCHAR(32),
  CUSTOMER_zip_code_prefix VARCHAR(5),
  CUSTOMER_city            VARCHAR(50),
  CUSTOMER_state           VARCHAR(2),
  PRIMARY KEY(CUSTOMER_id)
);

select * from CUSTOMERs_RM97898;

/*
--DROP TABLE geolocations_RM97898;
CREATE TABLE geolocations_RM97898 (
    geolocation_zip_code_prefix VARCHAR(5) ,
    geolocation_lat             NUMBER(38,20) ,
    geolocation_lng             NUMBER(38,20) ,
    geolocation_city            VARCHAR(50) ,
    geolocation_state           VARCHAR(2)--,
    --PRIMARY KEY (geolocation_zip_code_prefix, geolocation_city, geolocation_state)
);
*/

--DROP TABLE order_itens_RM97898;
CREATE TABLE order_itens_RM97898(
   order_id            VARCHAR(32),
   order_item_id       INTEGER,
   product_id          VARCHAR(32),
   seller_id           VARCHAR(32),
   shipping_limit_date DATE,
   price               NUMBER(10,3),
   freight_value       NUMBER(10,3),
   PRIMARY KEY (order_id, order_item_id)
);

--DROP TABLE order_payments_RM97898;
CREATE TABLE order_payments_RM97898 (
  order_id varchar(32),
  payment_sequencial integer,
  payment_type varchar(30),
  payment_installments integer,
  payment_values NUMBER(38,3),
  PRIMARY  KEY (order_id, payment_sequencial)
);

--DROP TABLE order_reviews_RM97898;
CREATE TABLE order_reviews_RM97898(
  review_id VARCHAR(128),
  order_id VARCHAR(128),
  review_score integer,
  review_comment_title varchar(500),
  review_comment_message varchar(1000),
  review_creation_date date,
  review_answer_timestamp date
);


--DROP TABLE orders_RM97898;
CREATE TABLE orders_RM97898(
  ORDER_ID VARCHAR(32),
  CUSTOMER_ID VARCHAR(32),
  ORDER_STATUS VARCHAR(30),
  ORDER_PURCHASE_TIMESTAMP TIMESTAMP,
  ORDER_APPROVED_AT TIMESTAMP,
  ORDER_DELIVERED_CARRIER_DATE VARCHAR(26),
  ORDER_DELIVERED_CUSTOMER_DATE VARCHAR(26),
  ORDER_ESTIMATED_DELIVERY_DATE DATE,
  PRIMARY KEY (ORDER_ID)
);

--DROP TABLE product_RM97898;
CREATE TABLE product_RM97898(
    product_id VARCHAR2(128),
    product_category_name VARCHAR2(128),
    product_name_lenght NUMBER(38,0),
    product_description_lenght NUMBER(38,0),
    product_photos_qty NUMBER(38,0),
    product_weight_g NUMBER(38,0),
    product_length_cm NUMBER(38,0),
    product_height_cm NUMBER(38,0),
    product_width_cm NUMBER(38,0),
    PRIMARY KEY (product_id)
);

--DROP TABLE PRODUCT_CATEGORIES_RM97898;
CREATE TABLE PRODUCT_CATEGORIES_RM97898(
  PRODUCT_CATEGORY_NAME	VARCHAR2(128),
  PRODUCT_CATEGORY_NAME_ENGLISH	VARCHAR2(128),
  PRIMARY KEY (PRODUCT_CATEGORY_NAME)
);

--DROP TABLE SELLERS;
CREATE TABLE SELLERS_RM97898(
   SELLER_ID	            VARCHAR2(128),
   SELLER_ZIP_CODE_PREFIX	VARCHAR2(26), 
   SELLER_CITY	            VARCHAR2(50),
   SELLER_STATE	            VARCHAR2(26),
   PRIMARY KEY (SELLER_ID)
);




-----------------------------------------------------------------

--AGREGAÇÕES

--CONTA QUANTIDADE DE REGISTROS NA BASE
SELECT COUNT(*) FROM PRODUCT_RM97898; --32951

--WWW.KAGLE.COM
SELECT * FROM CUSTOMERS_RM97898; -- TODOS OS CLIENTES
SELECT COUNT(*) FROM CUSTOMERS_RM97898; --99441 CLIENTES
SELECT COUNT(DISTINCT CUSTOMER_CITY) FROM CUSTOMERS_RM97898; --4119 CIDADES DIFERENTES
SELECT DISTINCT CUSTOMER_STATE FROM CUSTOMERS_RM97898; -- RETORNA ESTADOS DISTINTOS (27)

SELECT DISTINCT CUSTOMER_STATE
    FROM CUSTOMERS_RM97898
        ORDER BY CUSTOMER_STATE DESC; --AUTOMATCAMENTE ASCENDENTE (SE QUISER DESCENDENTE POE DESC)

--QUANTIDADE DE CLIENTE POR ESTADO
SELECT DISTINCT CUSTOMER_STATE, COUNT(*) AS QUANTIDADE_CLIENTES
    FROM CUSTOMERS_RM97898
GROUP BY CUSTOMER_STATE
ORDER BY CUSTOMER_STATE DESC;


--QUANTIDADE DE CLIENTE SOMENTE EM SP
SELECT UPPER(customer_city) AS CUSTOMER_CITY,
        COUNT(*) AS QUANTIDADE_CLIENTES
    FROM CUSTOMERS_RM97898
    WHERE CUSTOMER_STATE = 'SP'
GROUP BY CUSTOMER_CITY
ORDER BY CUSTOMER_CITY;

--QUANTIDADE DE CLIENTES, CIDADES, ESTADOS
SELECT COUNT(*) AS TOTAL_CLIENTES, 
    COUNT (DISTINCT CUSTOMER_CITY) AS TOTAL_CIDADES,
    COUNT (DISTINCT CUSTOMER_STATE) AS TOTAL_ESTADOS
FROM CUSTOMERS_RM97898;

--PESQUISADNO POR ASC E DESC AO MESMO TEMPO
SELECT CUSTOMER_CITY,
        CUSTOMER_STATE,
        COUNT(*) AS QUANTIDADE_CLIENTES
    FROM CUSTOMERS_RM97898
GROUP BY CUSTOMER_CITY, CUSTOMER_STATE
ORDER BY CUSTOMER_STATE DESC, CUSTOMER_CITY ASC;

--HAVING = TEM 
--HAVING COUNT(*)>1000 = TEM CONTADOR MAIOR QUE 1000
--PRECISA DO HAVING PORQUE QUANTIDADE_CLIENTE NAO EXISTE(É VIRTUAL)

--QUANTIDADE DE CLIENTES POR CIDADE/ESTADO ONDE É MAIOR QUE 1000
SELECT CUSTOMER_CITY,
        CUSTOMER_STATE,
        COUNT(*) AS QUANTIDADE_CLIENTES
    FROM CUSTOMERS_RM97898
GROUP BY CUSTOMER_CITY, CUSTOMER_STATE HAVING COUNT(*)>1000 --MAX MIN AVG SUM COUNT
ORDER BY CUSTOMER_STATE DESC, CUSTOMER_CITY ASC;

SELECT * FROM order_itens_rm97898;
--MAX MIN AVG SUM COUNT


--SOMA TODOS OS PREÇOS
SELECT SUM(PRICE) AS TOTAL_PRICE FROM order_itens_rm97898;

--SOMA AGRUPANDO POR DATA
SELECT SUM(PRICE) AS TOTAL_PRICE 
    FROM order_itens_rm97898
    GROUP BY DATA_LIMITE
    ORDER BY DATA_LIMITE;


SELECT DATA_LIMITE,
        SUM(PRICE) AS TOTAL_VENDAS,
        MIN(PRICE) AS VENDA_MINIMA,
        MAX(PRICE) AS VENDA_MAXIMA,
        COUNT (*) AS QUANTIDADE
    FROM order_itens_rm97898
    GROUP BY DATA_LIMITE
    ORDER BY DATA_LIMITE;



SELECT MIN(DATA_LIMITE) AS PRIMEIRA_VENDA,
        MAX(DATA_LIMITE) AS ULTIMA_VENDA,
        SUM(PRICE) AS TOTAL_VENDAS,
        MIN(PRICE) AS VENDA_MINIMA,
        MAX(PRICE) AS VENDA_MAXIMA,
        COUNT (*) AS QUANTIDADE
    FROM order_itens_rm97898
    GROUP BY DATA_LIMITE
    ORDER BY DATA_LIMITE;

--TODOS OS PEDIDOS DE CLIENTES DE SP (IN->LISTA)
SELECT * FROM ORDERS_RM97898
WHERE CUSTOMER_ID
    IN (SELECT CUSTOMER_ID
        FROM customers_rm97898
        WHERE CUSTOMER_STATE ='SP');
        
       
SELECT CLIENTE.CUSTOMER_ID,
        CLIENTE.CUSTOMER_STATE,
        PEDIDO.ORDER_STATUS,
        TO_CHAR(PEDIDO.ORDER_PURCHASE_TIMESTAMP, 'DD/MM/YYY') AS DATA_PEDIDO
    FROM ORDERS_RM97898 PEDIDO, 
        customers_rm97898 CLIENTE,
        ORDER_ITENS_RM97898 ITENS
WHERE PEDIDO.CUSTOMER_ID = CLIENTE.CUSTOMER_ID
    AND ITENS.ORDER_ID = PEDIDO.ORDER_ID
    AND TRIM(ORDER_STATUS) <> 'delivered';














